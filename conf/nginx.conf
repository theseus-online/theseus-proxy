worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    lua_shared_dict config 1m;
    init_by_lua '
        local cjson = require "cjson";

        local config = ngx.shared.config;

        local file = io.open("/config/config.json", "r");
        local content = cjson.decode(file:read("*all"));
        file:close();

        for name, value in pairs(content) do
            config:add(name, value);
        end
    ';

    server {
        listen       80;
        listen 443 ssl;
        ssl_certificate   /config/214035202880466.pem;
        ssl_certificate_key  /config/214035202880466.key;

        server_name  www.theseus.online;
        return       301 $scheme://theseus.online$request_uri;
    }

    server {
        listen 80;
        listen 443 ssl;
        ssl_certificate   /config/214035202880466.pem;
        ssl_certificate_key  /config/214035202880466.key;

        server_name theseus.online;

        location / {
            proxy_pass http://127.0.0.1:8070;
            proxy_set_header Host            $host;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location /web-shell {
            rewrite ^/web-shell/(.*) /$1 break;
            proxy_pass http://127.0.0.1:8000;
            proxy_set_header Host            $host;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location /ping {
            default_type application/json;
            rewrite_by_lua '
                ngx.say([[{"service": "theseus-proxy", "status": "online"}]]);
            ';
        }

        location ~ /proxy/users(/[^/]+)?/?$ {
            content_by_lua '
                ngx.exit(403)
            ';
        }

        location ~ /proxy/users/[^/]+/pods/[^/]+/containers/[^/]+/shell$ {
            rewrite_by_lua '
                local cjson = require "cjson"
                local cookie = ngx.var["cookie_theseus-userinfo"]
                if(not cookie) then
                    ngx.exit(403)
                end
                userinfo = cjson.decode(cookie)
                if(userinfo["name"] and userinfo["email"]
                                    and userinfo["avatar"]
                                    and userinfo["timestamp"]
                                    and userinfo["signature"]) then
                    local config = ngx.shared.config;
                    local resty_sha1 = require "resty.sha1"
                    local sha1 = assert(resty_sha1:new())
                    assert(sha1:update(userinfo["name"]))
                    assert(sha1:update(userinfo["email"]))
                    assert(sha1:update(userinfo["avatar"]))
                    assert(sha1:update(userinfo["timestamp"]))
                    assert(sha1:update(config:get("signature-key")))
                    local str = require "resty.string"
                    if(str.to_hex(sha1:final()) ~= userinfo["signature"]) then
                        ngx.exit(403)
                    end
                    ngx.req.set_header("x-theseus-username", userinfo["name"])
                    local m = assert(ngx.re.match(ngx.var.uri, "/proxy/users/([^/]+)/pods/([^/]+)/containers/([^/]+)/shell$", "o"))
                    if(m[1] ~= userinfo["name"]) then
                        ngx.exit(403)
                    end
                    local uri = "/api/v1/namespaces/" .. m[1] .. "/pods/" .. m[2] .. "/exec"
                    ngx.req.set_uri(uri)
                    local args = {
                        stdin = 1,
                        stdout = 1,
                        stderr = 1,
                        tty = 1,
                        container = m[3],
                        command = "/bin/sh"
                    }
                    ngx.req.set_uri_args(args)
                else
                    ngx.exit(403)
                end
            ';
            set_by_lua $k8s_address 'return ngx.shared.config:get("k8s-address")';
            proxy_pass $k8s_address; 
            proxy_set_header Upgrade         $http_upgrade;
            proxy_set_header Connection      "upgrade";
            proxy_set_header Host            $host;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location /proxy {
            default_type application/json;
            rewrite_by_lua '
                local cjson = require "cjson"
                local cookie = ngx.var["cookie_theseus-userinfo"]
                if(not cookie) then
                    ngx.exit(403)
                end
                userinfo = cjson.decode(cookie)
                if(userinfo["name"] and userinfo["email"]
                                    and userinfo["avatar"]
                                    and userinfo["timestamp"]
                                    and userinfo["signature"]) then
                    local config = ngx.shared.config;
                    local resty_sha1 = require "resty.sha1"
                    local sha1 = assert(resty_sha1:new())
                    assert(sha1:update(userinfo["name"]))
                    assert(sha1:update(userinfo["email"]))
                    assert(sha1:update(userinfo["avatar"]))
                    assert(sha1:update(userinfo["timestamp"]))
                    assert(sha1:update(config:get("signature-key")))
                    local str = require "resty.string"
                    if(str.to_hex(sha1:final()) ~= userinfo["signature"]) then
                        ngx.exit(403)
                    end
                    ngx.req.set_header("x-theseus-username", userinfo["name"])
                    local uri = ngx.re.sub(ngx.var.uri, "/proxy/(.*)", "/$1", "o")
                    ngx.req.set_uri(uri)
                else
                    ngx.exit(403)
                end
            ';
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host            $host;
            proxy_set_header X-Forwarded-For $remote_addr;
        }

        location /auth {
            default_type application/json;
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass http://127.0.0.1:8090;
            proxy_set_header Host            $host;
            proxy_set_header X-Forwarded-For $remote_addr;
        }
    }
}
